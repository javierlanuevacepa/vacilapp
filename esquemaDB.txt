
--ESTA APLICACION TAMBIEN PUEDE SER USADA PARA QUE RECINTOS SE PUBLICITEN PARA QUE LA GENTE ORGANIZE VACILES

-HACER UNA ENTIDAD RECINTO WOW 
---que tenga algun algoritmo algun machine learning lo que sea que te diga que vacile estara mejor
--que te pregunte despues del vacile o lo que sea como estuvo el vacile

CREATE TABLE tipo_usuario (
  id int not null auto_increment,
  tipousuario varchar2(30) not null
);

INSERT INTO tipo_usuario (null,'Usuario verificado');  --Solo un usuario verificado podra publicar eventos, administrar recintos
INSERT INTO tipo_usuario (null,'Usuario no verificado');   
INSERT INTO tipo_usuario (null,'Recinto');   

CREATE TABLE usuario (
  id_usuario int not null auto_increment,
  nombre_usuario varchar2(14) not null unique,
  correo_elec varchar2(30) not null unique,
  contrasena varchar2(40) not null,
  fecha_reg DATETIME not null,
  tipo_usuario int not null,
  foto BLOB,
  primary key (id),
  foreign key (tipo_usuario) references tipo_usuario(id)
);



CREATE TABLE recinto (
  id_recinto int not null auto_increment,
  foto_recinto blob,
  nombre_recinto varchar2(100) not null unique,
  descripcion TEXT,
  fecha_registro DATETIME not null,
  direccion varchar2(100) not null,
  referencias TEXT,
  likes int not null default 0,
  primary key (id_recinto)
)



--ALGUNA MANERA DEVERIFICAR LA VERACIDAD DE QUIEN RECLAMA ESTE RECINTO 


--QUIENES PODRAN ADMINISTRAR ESTE RECINTO
CREATE TABLE administradores_recinto (
  id_admin_rec int not null auto_increment,
  id_recinto_ad int not null,
  id_usuario int not null,
  fecha_registro DATETIME not null
) 





--Un trigger para cuando seacepte esto cambiar el usuario a verificado y registrar el usuario en  la tabla usuario_verificado
--Algo para que busque si ya hay una verificacion o peticion con este rut 
CREATE TABLE usuario_verificacion_peticion (
  id_peticion int not null auto_increment,
  id_usuario int not null,
  rut_verificacion varchar2(9) not null unique,
  digito_verificador varchar2(1) not null,
  estado_verificacion varchar2(15) not null,
  fecha_peticion datetime not null,
  fecha_resultado_pet DATETIME,
  primary key (id_peticion),
  foreign key (id_usuario) references usuario(id_usuario)
)

--Con esto finalmente cambia su usuario a verificado



CREATE TABLE evento (
  id_evento int not null auto_increment,
  id_publicador int not null,
  nombre_carrete varchar2(100) not null,
  flyer blob not null,
  fecha_registro DATETIME,
  fecha_carrete DATE,
  hora_empieza TIME,
  hora_termino TIME,
  nombrerecinto varchar2(50),
  likes int not null,
  direccion varchar2(50) not null,
  latitud DECIMAL(9,6),
  longitud DECIMAL(9,6),
  descripcion TEXT,
  primary key (id_evento),
  foreign key (idpublicador) references usuario(id_usuario)
);

--TRIGGER PARA QUE LE AGREGE +1 AL EVENTO
CREATE TABLE likes_evento (
  id_evento_likeado int not null,
  id_likeador_evento int not null,
  fecha_registro DATETIME NOT NULL,
  FOREIGN KEY (id_evento_likeado) REFERENCES evento(id_evento),
  foreign key (id_likeador_evento) references usuario(id_usuario)
)



CREATE TABLE comentario_evento (
 id_coment int not null auto_increment,
 id_publicacion int not null,
 id_comentador int not null, 
 fecha_registro DATETIME NOT NULL,
 fecha_comentario DATETIME,
 comentario text not null,
 likes int not null,
 primary key (id_coment),
 foreign key (id_publicacion) references evento(id_evento),
 foregn key (id_comentador) references usuario(id_usuario)
);

--TRIGGER PARA QUE LE AGREGE +1 AL COMENTARIO
CREATE TABLE likes_comentario_evento (
  id_like_comen int not null auto_increment,
  id_comentario_likeado int not null,
  id_likeador_comen int not null,
  fecha_registro DATETIME NOT NULL,
  PRIMARY KEY (id_like_comen),
  FOREIGN KEY (id_comentario_likeado) REFERENCES comentario_evento(id_coment),
  foreign key (id_likeador_comen) references usuario(id_usuario)
)







